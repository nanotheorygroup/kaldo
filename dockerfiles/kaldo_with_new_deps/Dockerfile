# -----------------------------------------------------------------------------
# Purpose
#   1) Use YOUR requirements.in to pin/install EVERYTHING (incl. Sphinx)
#   2) Install kALDo from the official repo (without pulling extra deps)
#   3) Run kALDo's tests from the repository ROOT (critical for data paths)
#   4) Build Sphinx docs into /opt/kaldo-docs
#   5) Serve docs on container port 8000 (so you can view in a browser)
# -----------------------------------------------------------------------------

FROM ghcr.io/deepmodeling/deepmd-kit:devel_cu11

# Put DeepMD-Kit's Python first, keep apt noninteractive, unbuffer Python logs,
# and force UTF-8 to avoid Sphinx/encoding issues.
ENV PATH="/opt/deepmd-kit/bin:${PATH}"
ARG DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1 TZ=Etc/UTC LANG=en_US.utf8

# Small, safe OS deps:
#  - locales: to create en_US.UTF-8
#  - git:     to clone the kALDo source we test/build docs from
RUN apt-get update && \
    apt-get install -y --no-install-recommends locales git && \
    localedef -i en_US -c -f UTF-8 \
              -A /usr/share/locale/locale.alias en_US.UTF-8 && \
    rm -rf /var/lib/apt/lists/*

# Bootstrap pip + pip-tools so your lockfile workflow works
RUN python3 -m ensurepip --upgrade && \
    python3 -m pip install --no-cache-dir --upgrade pip setuptools wheel pip-tools

# ----------------------------
# YOUR dependency flow (unchanged)
# ----------------------------
WORKDIR /mnt/work
COPY requirements.in ./
# pip-compile -> requirements.txt, then install the *exact* pins you chose
RUN pip-compile requirements.in --output-file=requirements.txt --no-strip-extras && \
    python3 -m pip install --no-cache-dir -r requirements.txt

# ----------------------------
# Install kALDo from official repo WITHOUT pulling its deps
# (so your versions stay authoritative)
# ----------------------------
ARG KALDO_VERSION=main
RUN python3 -m pip install --no-cache-dir --no-deps \
    "git+https://github.com/nanotheorygroup/kaldo.git@${KALDO_VERSION}#egg=kaldo"

# ----------------------------
# Clone the SAME ref for tests + docs, install editable so Sphinx autodoc
# imports this checkout (not a wheel from site-packages)
# ----------------------------
RUN git clone --branch "${KALDO_VERSION}" \
      https://github.com/nanotheorygroup/kaldo.git /tmp/kaldo && \
    python3 -m pip install --no-cache-dir --no-deps -e /tmp/kaldo

# ----------------------------
# >>> IMPORTANT FIX <<<
# Run tests from the *repository root* so tests that reference
#   'kaldo/tests/si-amorphous/CONFIG'
# resolve correctly. Using an absolute tests path without cd'ing would set
# a different cwd and break those relative paths.
# ----------------------------
WORKDIR /tmp/kaldo
RUN python3 -m pytest kaldo/tests --maxfail=1 --disable-warnings -q


# Build docs and move them into /opt/kaldo-docs
WORKDIR /tmp/kaldo/

# Doctest any code in your docs
# Makefile generated by sphinx-quickstart handles builder/env
RUN make -C docs html SPHINXOPTS="-j  auto  --keep-going"

WORKDIR /tmp/kaldo

# Heavily commented on purpose:
# - `make -C docs html`   : use the project's Sphinx Makefile to render HTML
# - SPHINXOPTS flags      : parallel builds, keep going after first warning
# - `mkdir -p` + `cp -a`  : normalize final output location to /opt/kaldo-docs
# - `test -f index.html`  : hard fail if docs didn't materialize (prevents 404s)
RUN make -C docs html SPHINXOPTS="-j auto --keep-going" \
 && mkdir -p /opt/kaldo-docs \
 && cp -a docs/_build/html/. /opt/kaldo-docs/ \
 && test -f /opt/kaldo-docs/index.html

# Serve the built docs (the directory MUST be the built HTML root)
EXPOSE 8000
CMD ["python3", "-m", "http.server", "8000", "--directory", "/opt/kaldo-docs"]
